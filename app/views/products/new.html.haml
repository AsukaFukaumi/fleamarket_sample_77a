.background
  =render 'home/header'
  .product
    = form_with model: @product, locale: true, id: "new_product" do |f|

      商品
      %span.form-require  ※必須
      = f.text_field :name, {class: "product__name"}

      %p
        出品画像
        %span.form-require ※必須 &nbsp; 5ファイルまで選択可能
      = f.fields_for :images do |i|
        = i.file_field :image, {class: "product__image",multiple: "multiple", onchange: "OnFileSelect(this)", accept: "image/*", type: "file", name: "image", required: ""}
        %ul.product__image__placeholder
          %ul#ID001
          %ul#ID002
          %ul#ID003
          %ul#ID004
          %ul#ID005
      %br
        価格
        %span.form-require  ※必須
        = f.text_field :amount_of_money, {class: "product__price"}
        円
      %br
        商品説明
        %span.form-require  ※必須
        = f.text_area :product_details, {class: "product__detail"}

      %table.product__table
        %tr
          %th カテゴリー
          %td
            %span.form-require  ※必須
            -# = f.collection_select :category_id, @parents, :id, :name, { include_blank: "選択してください", selected:"" }, id: "category_form", required: "", class: "product__category"
            -# #child_category_field 
            -# #grandchild_category_field 
            -# %select.product__category{name: "category", required: ""}

            %select.product__status{name: "category", required: ""}    
              %option{disabled: "disabled", required: ""} 選択してください
              %option{value: "レディース"} レディース
              %option{value: "メンズ"} メンズ
              %option{value: "ベビー・キッズ"} ベビー・キッズ
              %option{value: "インテリア・住まい・小物"} インテリア・住まい・小物
              %option{value: "本・音楽・ゲーム"} 本・音楽・ゲーム
              %option{value: "おもちゃ・ホビー・グッズ"} おもちゃ・ホビー・グッズ
              %option{value: "コスメ・香水・美容"} コスメ・香水・美容
              %option{value: "家電・スマホ・カメラ"} 家電・スマホ・カメラ
              %option{value: "スポーツ・レジャー"} スポーツ・レジャー
              %option{value: "ハンドメイド"} ハンドメイド
              %option{value: "チケット"} チケット
              %option{value: "自動車・オートバイ"} 自動車・オートバイ
              %option{value: "その他"} その他
        %tr
          %th 商品のサイズ
          %td
            %span.form-require  ※必須
            = f.text_field :size, {class: "product__size"}
        %tr
          %th 商品の状態
          %td
            %span.form-require  ※必須
            = f.select :status, :id, {}, class: "product__status" do
              %option{disabled: "disabled", required: ""} 選択してください
              %option{value: "新品/未使用"} 新品/未使用
              %option{value: "未使用に近い"} 未使用に近い
              %option{value: "目立った傷や汚れなし"} 目立った傷や汚れなし
              %option{value: "やや傷や汚れあり"} やや傷や汚れあり
              %option{value: "傷や汚れあり"} 傷や汚れあり
              %option{value: "全体的に状態が悪い"} 全体的に状態が悪い
        %tr
          %th 配送料の負担
          %td
            %span.form-require  ※必須
            = f.select :shipping_fee_burden, :id,{}, class: "product__fee" do
              %option{name: "shipping_fee_burden", type: "radio", value: "着払い(購入者負担)", required: ""}着払い(購入者負担)
              %p
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              %option{name: "shipping_fee_burden", type: "radio", value: "送料込み(出品者負担)", required: ""}送料込み(出品者負担)
        %tr
          %th 配送方法
          %td
            %span.form-require  ※必須
            = f.select :shipping_method, :id,{}, class: "product__shipping-method" do
              %option{disabled: "disabled", required: ""} 選択してください
              %option{value: "courier"} 宅急便
              %option{value: "courier_compact"} 宅急便コンパクト
              %option{value: "nekoposu"} ネコポス
              %option{value: "yu-pack"} ゆうパック
              %option{value: "yu-packet"} ゆうパケット
              %option{value: "yu-mail"} ゆうメール
              %option{value: "yu-packet_plus"} ゆうパケットプラス
              %option{value: "letter_pack_light"} レターパックライト
              %option{value: "letter_pack_plus"} レターパックプラス
              %option{value: "click_post"} クリックポスト
              %option{value: "smart_letter"} スマートレター
              %option{value: "regular_mail"} 普通郵便
              %option{value: "other"} その他
        %tr
          %th 発送元の地域
          %td
            %span.form-require  ※必須
            = f.select :prefectures, :id, {}, class: "product__shipping-region" do
              %option{disabled: "disabled", required: ""} 選択してください
              %option{value: "北海道"} 北海道
              %option{value: "青森県"} 青森県
              %option{value: "岩手県"} 岩手県
              %option{value: "宮城県"} 宮城県
              %option{value: "秋田県"} 秋田県
              %option{value: "山形県"} 山形県
              %option{value: "福島県"} 福島県
              %option{value: "茨城県"} 茨城県
              %option{value: "栃木県"} 栃木県
              %option{value: "群馬県"} 群馬県
              %option{value: "埼玉県"} 埼玉県
              %option{value: "千葉県"} 千葉県
              %option{value: "東京都", selected: "selected"} 東京都
              %option{value: "神奈川県"} 神奈川県
              %option{value: "新潟県"} 新潟県
              %option{value: "富山県"} 富山県
              %option{value: "石川県"} 石川県
              %option{value: "福井県"} 福井県
              %option{value: "山梨県"} 山梨県
              %option{value: "長野県"} 長野県
              %option{value: "岐阜県"} 岐阜県
              %option{value: "静岡県"} 静岡県
              %option{value: "愛知県"} 愛知県
              %option{value: "三重県"} 三重県
              %option{value: "滋賀県"} 滋賀県
              %option{value: "京都府"} 京都府
              %option{value: "大阪府"} 大阪府
              %option{value: "兵庫県"} 兵庫県
              %option{value: "奈良県"} 奈良県
              %option{value: "和歌山県"} 和歌山県
              %option{value: "鳥取県"} 鳥取県
              %option{value: "島根県"} 島根県
              %option{value: "岡山県"} 岡山県
              %option{value: "広島県"} 広島県
              %option{value: "山口県"} 山口県
              %option{value: "徳島県"} 徳島県
              %option{value: "香川県"} 香川県
              %option{value: "愛媛県"} 愛媛県
              %option{value: "高知県"} 高知県
              %option{value: "福岡県"} 福岡県
              %option{value: "佐賀県"} 佐賀県
              %option{value: "長崎県"} 長崎県
              %option{value: "熊本県"} 熊本県
              %option{value: "大分県"} 大分県
              %option{value: "宮崎県"} 宮崎県
              %option{value: "鹿児島県"} 鹿児島県
              %option{value: "沖縄県"} 沖縄県
        %tr
          %th 発送日の目安
          %td
            %span.form-require  ※必須
            = f.select :estimated_delivery, :id, {}, class: "product__shipping-date" do
              %option{disabled: "disabled", required: ""} 選択してください
              %option{value: "1〜2日で発送"} 1〜2日で発送
              %option{value: "2〜3日で発送"} 2〜3日で発送
              %option{value: "4〜7日で発送"} 4〜7日で発送

      = f.submit "出品する", class: "product__btn"


:javascript

  // 親カテゴリを変更するとjQueryが発火
  $("#category_form").change(function () {
    function build_childSelect() {
      let child_select = `
                <select name="" class="child_category" required: "required">
                  <option value=""> 選択してください </option>
                </select>
                `
      return child_select;
    }

    // selectタグにoptionタグを追加
    function build_Option(children) {
      let option_html = `
                        <option value=${children.id}>${children.name}</option>
                        `
      return option_html;
  }

    // 選択したoption(親カテゴリの値)を取得しparentValueに格納
    let parentValue = $("#category_form").val();

    // 初期値0("選択してください")以外を選択したらajax開始
    if (parentValue.length != 0) {
      $.ajax({
        url: '/products/search',
        type: 'GET',

        // productsコントローラーに paramsをparent_id で送る
        data: { parent_id: parentValue },
        dataType: 'json'
      })

        .done(function (data) {
          // 既に子カテゴリがある場合は削除
          $(".child_category").remove();
          // 既に孫カテゴリがある場合は孫カテゴリも削除
          $(".grandchild_category").remove();
          // build_childSelectを実行し selectタグを生成してビューにappend
          let child_select = build_childSelect
          $("#child_category_field").append(child_select);
          // jbuilderから取得したデータを1件ずつoptionタグにappend
          data.forEach(function (d) {
            let option_html = build_Option(d)
            $(".child_category").append(option_html);
          })
        })
        .fail(function () {
          alert("error:子カテゴリーの取得に失敗しました");
        });
    }
  });


  // 子カテゴリを変更するとjQueryが発火
  $(document).on("change", ".child_category", function () {
    function build_grandchildSelect() {
      let grandchild_select = `
                <select name="product[category_id]" class="grandchild_category" required: "required">
                  <option value=""> 選択してください </option>
                </select>
                `
      return grandchild_select;
    }

    // selectタグにoptionタグを追加
    function build_Option(grandchildren) {
      let option_html = `
                        <option value=${grandchildren.id}>${grandchildren.name}</option>
                        `
      return option_html;
  }

    // 選択したoption(子カテゴリの値)を取得しparentValueに格納
    let childValue = $(".child_category").val();

    // 初期値0("選択してください")以外を選択したらajax開始
    if (childValue.length != 0) {
      $.ajax({
        url: '/products/search',
        type: 'GET',

        // productsコントローラーに paramsをchildren_id で送る
        data: { children_id: childValue },
        dataType: 'json'
      })

        .done(function (data) {
          // 既に孫カテゴリがある場合は削除
          $(".grandchild_category").remove();
          // build_grandchildSelectを実行し selectタグを生成してビューにappend
          let grandchild_select = build_grandchildSelect
          $("#grandchild_category_field").append(grandchild_select);
          // jbuilderから取得したデータを1件ずつoptionタグにappend
          data.forEach(function (grandchild_d) {
            let option_html = build_Option(grandchild_d)
            $(".grandchild_category").append(option_html);
          })
        })
        .fail(function () {
          alert("error:孫カテゴリーの取得に失敗しました");
        });
    }
  });

